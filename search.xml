<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试环境搭建（三）-docker&amp;redis</title>
      <link href="/cicd/basic_redis/"/>
      <url>/cicd/basic_redis/</url>
      
        <content type="html"><![CDATA[<p>Redis 是一个强大的开源的高性能的key-value数据库，值 ( value ) 可以是字符串 ( String ) , 哈希 ( Map ) , 列表 ( list ) , 集合 ( Sets ) 或有序集合 ( Sorted Sets ) 等类型。每秒可以进行11万次读取和8万次写入操作。Redis还提供了多种特性，如发布&#x2F;订阅、通知、key过期等。Redis采用自己实现的分离器来实现高速的读写操作，效率非常高。Redis是一个简单、高效、分布式、基于内存的缓存工具，通过网络连接提供Key-Value式的缓存服务。</p><span id="more"></span><h1 id="一、获取docker-redis镜像"><a href="#一、获取docker-redis镜像" class="headerlink" title="一、获取docker redis镜像"></a>一、获取docker redis镜像</h1><p>唔~~~又到众所周知的原因了，想要拉取镜像，点击看<a href="/cicd/basic_docker/#3-3-docker%E6%BA%90%E4%BF%AE%E6%94%B9">第一篇的3.3小节</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull redis:latest</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker image ls</span><br><span class="line">[sudo] password for ace:</span><br><span class="line">REPOSITORY                  TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">hub.zentao.net/app/zentao   latest    f0a33d3e597e   2 weeks ago     605MB</span><br><span class="line">hello-world                 latest    74cc54e27dc4   3 weeks ago     10.1kB</span><br><span class="line">redis                       latest    fa310398637f   5 weeks ago     117MB</span><br><span class="line">mysql                       8.3.0     6f343283ab56   10 months ago   632MB</span><br></pre></td></tr></table></figure><h1 id="二、虚拟机创建映射目录，放置配置文件"><a href="#二、虚拟机创建映射目录，放置配置文件" class="headerlink" title="二、虚拟机创建映射目录，放置配置文件"></a>二、虚拟机创建映射目录，放置配置文件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 路径由用户决定</span><br><span class="line">$ cd ~</span><br><span class="line">$ sudo mkdir -p redis/config</span><br><span class="line">$ sudo mkdir -p redis/data</span><br><span class="line">$ sudo mkdir -p redis/logs</span><br><span class="line"># docker redis文档中提到以上的文件夹和文件都需要读写权限，那我偷个懒给与了全部读写执行权限</span><br><span class="line"># -R 递归所有目录和文件</span><br><span class="line">$ sudo chmod -R a+rwx redis</span><br></pre></td></tr></table></figure><p>配置文件redis.conf，路径位于~&#x2F;redis&#x2F;config</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aceserver:~/redis/config$ sudo vim redis.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">配置文件</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"># 注释bind，让外部可以访问redis，或者可以指定ip访问，只是本地测试可以只注释就好</span><br><span class="line"># bind 127.0.0.1 </span><br><span class="line"># 用守护线程的方式启动,默认no</span><br><span class="line">daemonize no</span><br><span class="line"># 给redis设置密码</span><br><span class="line">requirepass youpassword</span><br><span class="line"># redis持久化，默认是no</span><br><span class="line">appendonly no</span><br><span class="line"># 远程主机检测与客户端的存活时间间隔 默认是300秒</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="三、运行容器"><a href="#三、运行容器" class="headerlink" title="三、运行容器"></a>三、运行容器</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -p 6379:6379 --name redis_test -v ~/redis/config:/usr/local/etc/redis -v ~/redis/data:/data -v ~/redis/logs:/logs -d redis redis-server /usr/local/etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>参数解释<br>-p 容器6379端口映射到宿主机6379<br>–name 容器name<br>-v ~&#x2F;redis&#x2F;config:&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis 容器内&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis文件夹映射到宿主机的~&#x2F;redis&#x2F;config，data和logs同理，这样redis.conf配置文件会存在于容器内&#x2F;usr&#x2F;local&#x2F;etc&#x2F;redis文件夹下<br>-d daemon守护进程运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                  CREATED         STATUS                     PORTS                                                  NAMES</span><br><span class="line">9a96660e8f33   redis         &quot;docker-entrypoint.s…&quot;   5 seconds ago   Exited (0) 3 seconds ago                                                          redis_test</span><br></pre></td></tr></table></figure><p>检查容器运行发现退出了，检查一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker logs 9a96660e8f33</span><br><span class="line"># WARNING Memory overcommit must be enabled! Without it, a background save or replication may fail under low memory condition. Being disabled, it can also cause failures without low memory condition, see https://github.com/jemalloc/jemalloc/issues/1328. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect</span><br></pre></td></tr></table></figure><p>Redis 需要内存超分配（vm.overcommit_memory）被设置为 1。这意味着操作系统将始终允许分配所有请求的内存，这对于 Redis 的某些操作至关重要。<br>如果没有正确设置，当 Redis 尝试创建快照或进行某些类型的复制时，可能会因为内存不足而失败。这可能导致数据丢失或其他问题。</p><p>临时更改：在宿主机上执行以下命令,系统重启后失效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sysctl vm.overcommit_memory=1</span><br></pre></td></tr></table></figure><p>永久更改：编辑 &#x2F;etc&#x2F;sysctl.conf 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 添加以下内容</span><br><span class="line">vm.overcommit_memory = 1</span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sysctl -p</span><br></pre></td></tr></table></figure><h1 id="四、物理机（笔记本或台式电脑）测试连接虚拟机的6379端口"><a href="#四、物理机（笔记本或台式电脑）测试连接虚拟机的6379端口" class="headerlink" title="四、物理机（笔记本或台式电脑）测试连接虚拟机的6379端口"></a>四、物理机（笔记本或台式电脑）测试连接虚拟机的6379端口</h1><p>与mysql一样，使用navicat测试</p><p>在物理机的navicat填好对应资料后，点击左下角的测试连接，可以看到连接成功</p><p><img src="/pics/testing/test_redis.png"></p><h1 id="五、进入redis容器"><a href="#五、进入redis容器" class="headerlink" title="五、进入redis容器"></a>五、进入redis容器</h1><p>进入redis容器并尝试登录和写入数据到数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker exec -it redis容器ID /bin/bash</span><br><span class="line"># -a 代表password，但是这种方法并不安全，只是临时测试使用</span><br><span class="line">$ redis-cli -a abc123456</span><br><span class="line">127.0.0.1:6379&gt; set mykey &quot;hello&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line">&quot;hello&quot;</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>物理机使用navicat查询数据</p><p><img src="/pics/testing/test_redis_1.png"></p><p>参考资料：<br><a href="https://blog.csdn.net/H1727548/article/details/132512038">https://blog.csdn.net/H1727548/article/details/132512038</a> 介绍<br><a href="https://developer.aliyun.com/article/1388047">https://developer.aliyun.com/article/1388047</a> docker部署<br><a href="https://blog.csdn.net/qq_42146402/article/details/130204064">https://blog.csdn.net/qq_42146402/article/details/130204064</a> 配置说明<br><a href="https://hub.docker.com/_/redis">https://hub.docker.com/_/redis</a> 官方镜像<br><a href="https://blog.csdn.net/m0_57236802/article/details/134726043">https://blog.csdn.net/m0_57236802/article/details/134726043</a> overcommit问题<br><a href="https://redis.com.cn/commands.html">https://redis.com.cn/commands.html</a> 命令文档</p>]]></content>
      
      
      <categories>
          
          <category> cicd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> mysql </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试环境搭建（二）-docker&amp;mysql</title>
      <link href="/cicd/basic_mysql/"/>
      <url>/cicd/basic_mysql/</url>
      
        <content type="html"><![CDATA[<p>mysql也是测试项目中必用的，我们可以在docker中部署好mysql，用于我们在项目早期介入，便于灰盒测试。例如登录功能、详情功能等。</p><span id="more"></span><h1 id="一、在宿主机（虚拟机）新建docker-mysql数据挂载目录"><a href="#一、在宿主机（虚拟机）新建docker-mysql数据挂载目录" class="headerlink" title="一、在宿主机（虚拟机）新建docker mysql数据挂载目录"></a>一、在宿主机（虚拟机）新建docker mysql数据挂载目录</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ~/mysql/&#123;conf,data,log&#125;</span><br></pre></td></tr></table></figure><h1 id="二、运行docker-mysql容器"><a href="#二、运行docker-mysql容器" class="headerlink" title="二、运行docker mysql容器"></a>二、运行docker mysql容器</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">--restart=always \</span><br><span class="line">--name test_mysql \</span><br><span class="line">--privileged=true \</span><br><span class="line">-v ~/mysql/log:/var/log/mysql \</span><br><span class="line">-v ~/mysql/data:/var/lib/mysql \</span><br><span class="line">-v ~/mysql/conf/my.cnf:/etc/mysql/my.cnf \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=abc123456 \</span><br><span class="line">-d mysql:8.3.0</span><br></pre></td></tr></table></figure><h1 id="三、检查docker容器"><a href="#三、检查docker容器" class="headerlink" title="三、检查docker容器"></a>三、检查docker容器</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker ps</span><br><span class="line"># 出现以下信息说明运行成功</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS         PORTS                                                  NAMES</span><br><span class="line">5f32c38e2309   mysql:8.3.0   &quot;docker-entrypoint.s…&quot;   11 seconds ago   Up 9 seconds   0.0.0.0:3306-&gt;3306/tcp, :::3306-&gt;3306/tcp, 33060/tcp   test_mysql</span><br></pre></td></tr></table></figure><h1 id="四、进入docker的mysql容器，连接mysql服务器"><a href="#四、进入docker的mysql容器，连接mysql服务器" class="headerlink" title="四、进入docker的mysql容器，连接mysql服务器"></a>四、进入docker的mysql容器，连接mysql服务器</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ sudo doccker exec -it 容器ID /bin/bash</span><br><span class="line">$ mysql -u 用户名 -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 9</span><br><span class="line">Server version: 8.3.0 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2024, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br></pre></td></tr></table></figure><h1 id="五、物理机（笔记本或台式电脑）测试连接虚拟机的3306端口"><a href="#五、物理机（笔记本或台式电脑）测试连接虚拟机的3306端口" class="headerlink" title="五、物理机（笔记本或台式电脑）测试连接虚拟机的3306端口"></a>五、物理机（笔记本或台式电脑）测试连接虚拟机的3306端口</h1><p>获取虚拟机的ip地址，在序号2：ens33中看到ip地址是192.168.52.131</p><p>虚拟机终端输入ip addr</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:bb:7c:8d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    altname enp2s1</span><br><span class="line">    inet 192.168.52.131/24 metric 100 brd 192.168.52.255 scope global dynamic ens33</span><br><span class="line">       valid_lft 1024sec preferred_lft 1024sec</span><br><span class="line">    inet6 fe80::20c:29ff:febb:7c8d/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    link/ether 02:42:3e:5b:ed:29 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:3eff:fe5b:ed29/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">5: vethb009301@if4: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class="line">    link/ether 66:1f:14:31:c4:92 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::641f:14ff:fe31:c492/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>在物理机的navicat填好对应资料后，点击左下角的测试连接，可以看到连接成功</p><p><img src="/pics/testing/navicat2.png"></p><p>双击左侧打开数据库</p><p><img src="/pics/testing/navicat3.png"></p><p>本文重新更新于2025-01</p><p>参考资料：<br><a href="https://blog.csdn.net/donkor_/article/details/139879575">https://blog.csdn.net/donkor_/article/details/139879575</a><br><a href="https://mysql.net.cn/doc/refman/8.0/en/connecting-disconnecting.html">https://mysql.net.cn/doc/refman/8.0/en/connecting-disconnecting.html</a><br><a href="https://blog.csdn.net/Yvesty/article/details/119345796">https://blog.csdn.net/Yvesty/article/details/119345796</a></p>]]></content>
      
      
      <categories>
          
          <category> cicd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试环境搭建（一）-docker&amp;ubuntu</title>
      <link href="/cicd/basic_docker/"/>
      <url>/cicd/basic_docker/</url>
      
        <content type="html"><![CDATA[<p>为了测试环境的一致性，可以先从docker搭建开始，docker是所有必要工具的搭建基础，虽然在大部分成熟的企业中已经做好了相应配置，但是了解搭建过程和目的对于个人成长也是很必要的。</p><span id="more"></span><p>本文重新更新于2025-02-01</p><h1 id="一、物理机、虚拟机和操作系统"><a href="#一、物理机、虚拟机和操作系统" class="headerlink" title="一、物理机、虚拟机和操作系统"></a>一、物理机、虚拟机和操作系统</h1><p>本地采用vmware + ubuntu24.04搭建虚拟机，物理机是x86_64，windows11</p><h1 id="二、虚拟机环境搭建的注意点"><a href="#二、虚拟机环境搭建的注意点" class="headerlink" title="二、虚拟机环境搭建的注意点"></a>二、虚拟机环境搭建的注意点</h1><p>安装参考这个网址：<a href="https://blog.csdn.net/m0_70885101/article/details/137694608">https://blog.csdn.net/m0_70885101/article/details/137694608</a><br>再自己摸索一下问题不大</p><h2 id="换源-amp-apt-update"><a href="#换源-amp-apt-update" class="headerlink" title="换源&amp;apt update"></a>换源&amp;apt update</h2><p>由于众所周知的原因，ubuntu的apt源大概率要更换成<strong>国内镜像</strong></p><p>apt源的配置文件已经更换到 <strong>&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;ubuntu.sources</strong></p><p>源文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /etc/apt/sources.list.d/</span><br><span class="line">$ cat ubuntu.sources</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Types: deb</span><br><span class="line">URIs: http://cn.archive.ubuntu.com/ubuntu/</span><br><span class="line">Suites: noble noble-updates noble-backports</span><br><span class="line">Components: main restricted universe multiverse</span><br><span class="line">Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line">Types: deb</span><br><span class="line">URIs: http://security.ubuntu.com/ubuntu/</span><br><span class="line">Suites: noble-security</span><br><span class="line">Components: main restricted universe multiverse</span><br><span class="line">Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg</span><br></pre></td></tr></table></figure><p>备份源文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp ubuntu.sources ubuntu.sources.bak</span><br></pre></td></tr></table></figure><p>修改ubuntu.sources</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$sudo vim ubuntu.sources</span><br><span class="line"></span><br><span class="line"># 修改成以下内容</span><br><span class="line"></span><br><span class="line">Types: deb</span><br><span class="line">URIs: https://mirrors.aliyun.com/ubuntu/</span><br><span class="line">Suites: noble noble-updates noble-backports noble-security</span><br><span class="line">Components: main restricted universe multiverse</span><br><span class="line">Signed-By: /usr/share/keyrings/ubuntu-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line"># 修改完成，退出insert模式，:wq保存和关闭文件</span><br></pre></td></tr></table></figure><p>apt更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt update</span><br></pre></td></tr></table></figure><h1 id="三、docker-engine安装"><a href="#三、docker-engine安装" class="headerlink" title="三、docker engine安装"></a>三、docker engine安装</h1><h2 id="3-1-卸载旧版本"><a href="#3-1-卸载旧版本" class="headerlink" title="3.1 卸载旧版本"></a>3.1 卸载旧版本</h2><p>linux可能提供非官方的docker包，与官方的可能会冲突，必须先卸载一下非官方软件包</p><ul><li>docker.io</li><li>docker-compose</li><li>docker-compose-v2</li><li>docker-doc</li><li>podman-docker</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done</span><br></pre></td></tr></table></figure><p>镜像、容器、网络等存储在&#x2F;var&#x2F;lib&#x2F;docker&#x2F;，删除docker的时候不会移除。如果需要干净的安装环境，选择先清除已存在的数据，参考这个链接<a href="https://docs.docker.com/engine/install/ubuntu/#uninstall-docker-engine">https://docs.docker.com/engine/install/ubuntu/#uninstall-docker-engine</a></p><h2 id="3-2-使用apt进行安装"><a href="#3-2-使用apt进行安装" class="headerlink" title="3.2 使用apt进行安装"></a>3.2 使用apt进行安装</h2><p>1.设置docker的apt存储库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Add Docker&#x27;s official GPG key:</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ca-certificates curl</span><br><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class="line">sudo chmod a+r /etc/apt/keyrings/docker.asc</span><br><span class="line"></span><br><span class="line"># Add the repository to Apt sources:</span><br><span class="line">echo \</span><br><span class="line">  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span><br><span class="line">  $(. /etc/os-release &amp;&amp; echo &quot;$&#123;UBUNTU_CODENAME:-$VERSION_CODENAME&#125;&quot;) stable&quot; | \</span><br><span class="line">  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>2.安装docker的包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h2 id="3-3-docker源修改"><a href="#3-3-docker源修改" class="headerlink" title="3.3 docker源修改"></a>3.3 docker源修改</h2><p>又因为众所周知的原因，docker也需要修改为国内源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd /etc/docker/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim daemon.json</span><br></pre></td></tr></table></figure><p>填入以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://docker.1ms.run&quot;,</span><br><span class="line">        &quot;https://docker.xuanyuan.me&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>测试国内源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br><span class="line"># 出现以下信息证明测试成功了</span><br><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">e6590344b1a5: Pull complete</span><br><span class="line">Digest: sha256:d715f14f9eca81473d9112df50457893aa4d099adeb4729f679006bf5ea12407</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本文重新更新于2025-01</p>]]></content>
      
      
      <categories>
          
          <category> cicd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试基础理论</title>
      <link href="/basic_theory_of_testing/basic_theory/"/>
      <url>/basic_theory_of_testing/basic_theory/</url>
      
        <content type="html"><![CDATA[<p>测试基础理论是测试工作的基础</p><span id="more"></span><h1 id="一、软件测试的定义和目的"><a href="#一、软件测试的定义和目的" class="headerlink" title="一、软件测试的定义和目的"></a>一、软件测试的定义和目的</h1><p>定义：软件测试是规定条件下对软件产品进行操作，发现软件中的错误和缺陷，衡量软件质量，并对软件是否满足设计要求进行评估的过程。<br>目的：</p><ul><li>验证软件是否满足需求和用户期望</li><li>发现缺陷和错误，提高软件质量</li><li>提高可靠性和稳定性</li><li>了解软件性能和功能，以便优化和改进</li></ul><h1 id="二、软件测试的原则"><a href="#二、软件测试的原则" class="headerlink" title="二、软件测试的原则"></a>二、软件测试的原则</h1><p>软件测试应尽早测试、全面测试、基于风险测试、迭代测试、具备客观性等。</p><ul><li>尽早原则：应该开发的早起阶段尽早介入，降低修复成本</li><li>全面原则：对功能、模块、接口、边界条件等进行全面测试，确保软件质量</li><li>基于风险测试：根据功能、复杂度、使用频率等因素，评估高风险重点测试</li><li>迭代测试：软件测试要持续迭代，确保软件质量</li><li>客观性：测试人员应该保持客观，准确发现和报告软件中的问题</li></ul><h1 id="三、软件测试类型"><a href="#三、软件测试类型" class="headerlink" title="三、软件测试类型"></a>三、软件测试类型</h1><h2 id="3-1-开发阶段划分"><a href="#3-1-开发阶段划分" class="headerlink" title="3.1 开发阶段划分"></a>3.1 开发阶段划分</h2><h3 id="3-1-1-单元测试"><a href="#3-1-1-单元测试" class="headerlink" title="3.1.1 单元测试"></a>3.1.1 单元测试</h3><p>对软件最小可测单位进行检查验证，一般是针对函数、类、模块进行的测试，一般由开发人员自己完成，保证每个单元的正确性，一般是使用白盒测试的方法。</p><h3 id="3-1-2-集成测试"><a href="#3-1-2-集成测试" class="headerlink" title="3.1.2 集成测试"></a>3.1.2 集成测试</h3><ul><li>单测之后，测试模块间的接口，使用白盒和黑盒测试方法，关注模块间的数据传输和功能冲突。</li><li>讲多个单元组合在一起测试，检查单元间的接口和数据传递是否正确。</li><li>可以分为自顶向下，自底向上和混合等多种方式。</li></ul><h3 id="3-1-3-系统测试"><a href="#3-1-3-系统测试" class="headerlink" title="3.1.3 系统测试"></a>3.1.3 系统测试</h3><ul><li>测试完整系统，包括功能、性能和运行环境，依据需求由黑盒测试工程执行</li><li>整个软件系统作为一个整体，验证系统师傅符合需求和规格说明</li><li>包括功能、性能、兼容性、安全性测试等。</li></ul><h3 id="3-1-4-验收测试"><a href="#3-1-4-验收测试" class="headerlink" title="3.1.4 验收测试"></a>3.1.4 验收测试</h3><ul><li>分为α测试和β测试</li><li>软件部署前的最终测试，由用户或需求方使用黑盒测试方法执行，验证软件是否满足用户的需求和期望。</li></ul><h2 id="3-2-查看代码划分"><a href="#3-2-查看代码划分" class="headerlink" title="3.2 查看代码划分"></a>3.2 查看代码划分</h2><h3 id="3-2-1-黑盒测试"><a href="#3-2-1-黑盒测试" class="headerlink" title="3.2.1 黑盒测试"></a>3.2.1 黑盒测试</h3><ul><li>不关心程序结构，关注输入输出</li><li>测试人员不了解内部实现细节，根据规格说明书来设计测试用例，检查软件是否符合要求</li><li>主要关注软件的外部行为和功能表现</li></ul><h3 id="3-2-2-白盒测试"><a href="#3-2-2-白盒测试" class="headerlink" title="3.2.2 白盒测试"></a>3.2.2 白盒测试</h3><ul><li>研究程序逻辑</li><li>对内部结构和代码有深入了解，根据代码逻辑设计测试用例，检查逻辑正确性和覆盖程度。</li></ul><h3 id="3-2-3-灰盒测试"><a href="#3-2-3-灰盒测试" class="headerlink" title="3.2.3 灰盒测试"></a>3.2.3 灰盒测试</h3><ul><li>介于黑白之间，关注功能和接口</li><li>对于逻辑有一定了解，但不会像白盒一样详细。</li><li>关注外部功能和考虑内部结构。</li></ul><h2 id="3-3-按是否运行划分"><a href="#3-3-按是否运行划分" class="headerlink" title="3.3 按是否运行划分"></a>3.3 按是否运行划分</h2><h3 id="3-3-1-静态测试"><a href="#3-3-1-静态测试" class="headerlink" title="3.3.1 静态测试"></a>3.3.1 静态测试</h3><ul><li>不运行软件，根据文档代码等进行检查和分析，发现潜在问题</li><li>代码审查、文档审核、静态分析等工作方式</li></ul><h3 id="3-3-2-动态测试"><a href="#3-3-2-动态测试" class="headerlink" title="3.3.2 动态测试"></a>3.3.2 动态测试</h3><ul><li>运行软件检查功能、性能、安全等</li><li>包括功能测试、性能测试、压力测试、兼容性测试等</li></ul><h2 id="3-4-按照测试对象划分"><a href="#3-4-按照测试对象划分" class="headerlink" title="3.4 按照测试对象划分"></a>3.4 按照测试对象划分</h2><h3 id="3-4-1-页面测试"><a href="#3-4-1-页面测试" class="headerlink" title="3.4.1 页面测试"></a>3.4.1 页面测试</h3><p>观测用户软件的布局、颜色、字体等，部分公司有UI进行检查</p><h3 id="3-4-2-数据测试"><a href="#3-4-2-数据测试" class="headerlink" title="3.4.2 数据测试"></a>3.4.2 数据测试</h3><p>检查软件处理数据的准确性，完整性和一致性，包括数据输入，检索，输出等。</p><h3 id="3-4-3-易用性测试"><a href="#3-4-3-易用性测试" class="headerlink" title="3.4.3 易用性测试"></a>3.4.3 易用性测试</h3><p>操作简便性、用户学习成本、满意度等。</p><h3 id="3-4-4-业务逻辑测试"><a href="#3-4-4-业务逻辑测试" class="headerlink" title="3.4.4 业务逻辑测试"></a>3.4.4 业务逻辑测试</h3><p>验证软件的业务流程和逻辑是否正确，是否符合业务需求。</p><h3 id="3-4-5-性能测试"><a href="#3-4-5-性能测试" class="headerlink" title="3.4.5 性能测试"></a>3.4.5 性能测试</h3><p>评估软件在不同负载下的性能表现，响应时间，吞吐量，资源利用率等。</p><h3 id="3-4-6-安全测试"><a href="#3-4-6-安全测试" class="headerlink" title="3.4.6 安全测试"></a>3.4.6 安全测试</h3><p>数据泄露、权限管理不当</p><h3 id="3-4-7-兼容性测试"><a href="#3-4-7-兼容性测试" class="headerlink" title="3.4.7 兼容性测试"></a>3.4.7 兼容性测试</h3><p>不同操作系统，浏览器，硬件平台下的兼容性</p><h3 id="3-4-8-文档测试"><a href="#3-4-8-文档测试" class="headerlink" title="3.4.8 文档测试"></a>3.4.8 文档测试</h3><p>基于需求文档、设计文档进行测试，确保文档的完整性</p><h3 id="3-4-9-安装测试"><a href="#3-4-9-安装测试" class="headerlink" title="3.4.9 安装测试"></a>3.4.9 安装测试</h3><p>安装过程是否正确和顺利</p><h3 id="3-4-10-可靠性测试"><a href="#3-4-10-可靠性测试" class="headerlink" title="3.4.10 可靠性测试"></a>3.4.10 可靠性测试</h3><p>在规定时间和条件下，完成规定的功能的能力</p><h3 id="3-4-11-恢复测试"><a href="#3-4-11-恢复测试" class="headerlink" title="3.4.11 恢复测试"></a>3.4.11 恢复测试</h3><p>检查系统的容错能力，系统故障能否在规定时间内恢复。</p><h2 id="3-5-按测试实施的组织划分"><a href="#3-5-按测试实施的组织划分" class="headerlink" title="3.5 按测试实施的组织划分"></a>3.5 按测试实施的组织划分</h2><h3 id="α测试"><a href="#α测试" class="headerlink" title="α测试"></a>α测试</h3><p>开发环境下内部用户测试</p><h3 id="β测试"><a href="#β测试" class="headerlink" title="β测试"></a>β测试</h3><p>软件最终用户在实际使用环境测试</p><h2 id="3-6-是否手工执行划分"><a href="#3-6-是否手工执行划分" class="headerlink" title="3.6 是否手工执行划分"></a>3.6 是否手工执行划分</h2><h3 id="3-6-1-手工测试-x2F-功能测试"><a href="#3-6-1-手工测试-x2F-功能测试" class="headerlink" title="3.6.1 手工测试&#x2F;功能测试"></a>3.6.1 手工测试&#x2F;功能测试</h3><p>人工输入用例并观察结果</p><h3 id="3-6-2-自动化测试"><a href="#3-6-2-自动化测试" class="headerlink" title="3.6.2 自动化测试"></a>3.6.2 自动化测试</h3><p>预设条件下运行软件，评估运行结果</p><h2 id="3-7-测试地域划分"><a href="#3-7-测试地域划分" class="headerlink" title="3.7 测试地域划分"></a>3.7 测试地域划分</h2><p>一般会涉及到对外软件，分为国际化测试和本地化测试。</p><p>软件测试的分类有助于理解测试目的和方法。不同的测试关注点不同，如功能、性能、安全等都有独特的测试方法和重点。通过合理的测试策略，确保软件符合用户的需求和期待。</p><h1 id="四、软件测试的流程"><a href="#四、软件测试的流程" class="headerlink" title="四、软件测试的流程"></a>四、软件测试的流程</h1><p>虽然不同的软件测试流程有不同之处，但一般都会遵循基础测试流程，会根据项目要求对实际情况而定。</p><h2 id="4-1-需求评审阶段"><a href="#4-1-需求评审阶段" class="headerlink" title="4.1 需求评审阶段"></a>4.1 需求评审阶段</h2><ul><li>参与需求讨论和评审会议，由产品和开发团队共同对软件需求进行详细分析理解</li><li>确保对需求的功能、性能、页面等有清晰认知，明确测试的重点和范围</li><li>提出对需求的疑问和建议</li></ul><h2 id="4-2-制定测试计划"><a href="#4-2-制定测试计划" class="headerlink" title="4.2 制定测试计划"></a>4.2 制定测试计划</h2><ul><li>明确测试目标：确认软件需要达到的质量标准和预期功能实现</li><li>界定测试范围：确定需要测试的功能、模块、特性等</li><li>制定测试测试：选择合适的测试方法和技术</li><li>规划测试资源：人力、时间、硬软件资源分配</li><li>测试时间表：制定猜测是进度计划，确保工作按时完成。</li></ul><h2 id="4-3-测试用例设计"><a href="#4-3-测试用例设计" class="headerlink" title="4.3 测试用例设计"></a>4.3 测试用例设计</h2><ul><li>依据需求文档和测试计划，设计详细的测试用例</li><li>考虑正常和异常的测试场景，包括功能、性能、兼容性、安全测试等</li><li>对测试用例进行编号和分类，确保具有良好的可读性和可维护性</li><li>组织测试用例评审，邀请产品和开发人员参与，确保测试用例的完整性和有效性</li></ul><h2 id="4-4-测试环境搭建"><a href="#4-4-测试环境搭建" class="headerlink" title="4.4 测试环境搭建"></a>4.4 测试环境搭建</h2><ul><li>准备硬件设备、系统、数据库、中间件等测试环境</li><li>安装和配置软件和工具，确保稳定性和兼容性</li><li>对测试环境进行验证和调试，确保满足测试要求</li></ul><h2 id="4-5-测试执行"><a href="#4-5-测试执行" class="headerlink" title="4.5 测试执行"></a>4.5 测试执行</h2><ul><li>按照测试计划和用例逐步执行测试</li><li>记录测试过程实际结果，包括通过和发现的缺陷</li><li>对发现的缺陷进行详细记录，描述缺陷出现的步骤，严重程度，优先级等信息</li><li>及时反馈给开发团队，跟踪缺陷的修复情况</li></ul><h2 id="4-6-缺陷管理和跟踪"><a href="#4-6-缺陷管理和跟踪" class="headerlink" title="4.6 缺陷管理和跟踪"></a>4.6 缺陷管理和跟踪</h2><ul><li>缺陷记录，缺陷描述、发现时间、发现人、所属模块、严重程度、优先级</li><li>缺陷修复过程：缺陷分配给开发人员，跟踪修复情况，确保按照修复缺陷</li><li>进行验证：进行回归测试，验证是否正确修复，同时检查是否引入新的缺陷</li></ul><h2 id="4-7-测试评估阶段"><a href="#4-7-测试评估阶段" class="headerlink" title="4.7 测试评估阶段"></a>4.7 测试评估阶段</h2><ul><li>根据测试结果，评估软件质量</li><li>分析测试数据，评估软件功能、性能、兼容性</li><li>编写测试报告，总结测试过程中遇到的情况，测试结果，发现的问题，统计数据等</li></ul><h2 id="4-8-测试报告"><a href="#4-8-测试报告" class="headerlink" title="4.8 测试报告"></a>4.8 测试报告</h2><ul><li>对测试过程进行总结，回顾测试过程中遇到的问题和解决方案</li><li>向产品和开发团队反馈测试结果，提出改进建议</li><li>参与项目总结会议，为后续工作积累经验和提供参考</li></ul><h1 id="五、软件测试方法"><a href="#五、软件测试方法" class="headerlink" title="五、软件测试方法"></a>五、软件测试方法</h1><h2 id="5-1-黑盒测试"><a href="#5-1-黑盒测试" class="headerlink" title="5.1 黑盒测试"></a>5.1 黑盒测试</h2><p>黑盒测试中测试人员不关注内部结构与实现，关注输入输出，功能表现，根据规格说明书来设计测试用例</p><h3 id="5-1-1-等价类划分法"><a href="#5-1-1-等价类划分法" class="headerlink" title="5.1.1 等价类划分法"></a>5.1.1 等价类划分法</h3><ul><li>输入数据划分为若干等价类，每种等价类代表一种可能的输入情况。</li><li>等价类可分为有效等价类和无效等价类<ul><li>有效等价类：符合需求的输入数据</li><li>无效等价类：不符合需求的输入数据</li></ul></li><li>从等价类中选取代表性的数据进行测试，以覆盖各种输入情况</li><li>如需要输入整数<ul><li>有效等价类：随机的整数</li><li>无效等价类：小数</li></ul></li></ul><h3 id="5-1-2-边界值分析法"><a href="#5-1-2-边界值分析法" class="headerlink" title="5.1.2 边界值分析法"></a>5.1.2 边界值分析法</h3><ul><li>选取数据数据范围的边界值进行测试，往往边界值附近更容易出现错误</li><li>如需要输入整数范围1-100<ul><li>选取-1，1,1.1</li><li>选取99,99.1,101</li><li>…</li></ul></li></ul><h3 id="5-1-3-因果图法"><a href="#5-1-3-因果图法" class="headerlink" title="5.1.3 因果图法"></a>5.1.3 因果图法</h3><ul><li>通过分析输入条件之间的因果关系生成判定表，从而设计测试用例</li><li>适用于输入条件之间存在多种组合关系</li><li>如条件A和B都需要满足才能输出结果C<ul><li>A已登录</li><li>B已付费</li><li>C查看结果</li></ul></li></ul><h3 id="5-1-4-决策表法"><a href="#5-1-4-决策表法" class="headerlink" title="5.1.4 决策表法"></a>5.1.4 决策表法</h3><ul><li>将条件和动作列出表格，根据条件组合确定采取的动作从而设计测试用例。</li><li>适用于条件和动作之间存在复杂逻辑关系</li></ul><h3 id="5-1-5-正交试验法"><a href="#5-1-5-正交试验法" class="headerlink" title="5.1.5 正交试验法"></a>5.1.5 正交试验法</h3><ul><li>从大量的试验点中挑选出适量的、有代表性的点，应用依据伽罗瓦理论导出的“正交表”，合理地安排试验的一种科学的试验设计方法。</li><li>如表单中，必填字段A，B，C各有3个参数，那么尝试所有组合方案有3x3x3&#x3D;27种组合，但是出于时间关系，就可以采用正交表，讲27种组合剪至9种组合即可。</li></ul><p>正交表示例：</p><table><thead><tr><th>测试用例编号</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>T1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>T2</td><td>0</td><td>1</td><td>2</td></tr><tr><td>T3</td><td>0</td><td>2</td><td>1</td></tr><tr><td>T4</td><td>1</td><td>0</td><td>1</td></tr><tr><td>T5</td><td>1</td><td>1</td><td>2</td></tr><tr><td>T6</td><td>1</td><td>2</td><td>0</td></tr><tr><td>T7</td><td>2</td><td>0</td><td>2</td></tr><tr><td>T8</td><td>2</td><td>1</td><td>0</td></tr><tr><td>T9</td><td>2</td><td>2</td><td>1</td></tr></tbody></table><h3 id="5-1-6-场景法"><a href="#5-1-6-场景法" class="headerlink" title="5.1.6 场景法"></a>5.1.6 场景法</h3><p>通过模拟用户的操作场景来设计测试用例，主要用于测试系统的业务流程。场景法通常包括基本流（正常的操作流程）和备选流（异常的操作流程）。</p><p>对于一个网上购物的系统，基本流为用户登录、选择商品、加入购物车、结算、支付。备选流可以包括用户未登录时进行操作、商品库存不足、支付失败等情况。根据这些流程设计测试用例。</p><h3 id="5-1-7-错误推测法"><a href="#5-1-7-错误推测法" class="headerlink" title="5.1.7 错误推测法"></a>5.1.7 错误推测法</h3><p>基于经验和直觉推测软件中可能产生的错误，针对性设计测试用例。</p><p>对于一个登录功能，测试人员可能会推测用户可能会输入错误的用户名或密码，或者输入的用户名或密码为空，或者输入的用户名或密码包含特殊字符等情况，然后针对这些推测设计相应的测试用例。</p><h2 id="5-2-白盒测试"><a href="#5-2-白盒测试" class="headerlink" title="5.2 白盒测试"></a>5.2 白盒测试</h2><h3 id="5-2-1-语句覆盖"><a href="#5-2-1-语句覆盖" class="headerlink" title="5.2.1 语句覆盖"></a>5.2.1 语句覆盖</h3><ul><li>确保程序中每一条语句都至少执行一次。</li><li>是一种较弱的覆盖标准，可能会无法发现逻辑错误，特别在判定语句中</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(a &gt; b):</span><br><span class="line">  x = 1;</span><br><span class="line">else:</span><br><span class="line">  x = 2;</span><br><span class="line">y = x + 3;</span><br></pre></td></tr></table></figure><p>一个满足语句覆盖的测试用例可以是 a &#x3D; 2, b &#x3D; 1</p><h3 id="5-2-2-判定覆盖"><a href="#5-2-2-判定覆盖" class="headerlink" title="5.2.2 判定覆盖"></a>5.2.2 判定覆盖</h3><ul><li>要求所有分支都要执行一遍，但仍然可能会忽略某些条件组合导致覆盖度不足</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(a &gt; b):</span><br><span class="line">  x = 1;</span><br><span class="line">else:</span><br><span class="line">  x = 2;</span><br><span class="line">y = x + 3;</span><br></pre></td></tr></table></figure><p>满足判定覆盖的测试用例可以是 a &#x3D; 2, b &#x3D; 1（使判定为真）和 a &#x3D; 1, b &#x3D; 2（使判定为假）</p><h3 id="5-2-3-条件覆盖"><a href="#5-2-3-条件覆盖" class="headerlink" title="5.2.3 条件覆盖"></a>5.2.3 条件覆盖</h3><ul><li>确保判定中每个条件可能的取值至少满足一次</li><li>多个条件的判定需要考虑每个条件的各种可能取值</li><li>例如，对于代码 if (a &gt; b and c &gt; d)，条件覆盖的测试用例需要包括 a &gt; b 为真和为假的情况，以及 c &gt; d 为真和为假的情况。</li></ul><h3 id="5-2-4-判定-条件覆盖"><a href="#5-2-4-判定-条件覆盖" class="headerlink" title="5.2.4 判定-条件覆盖"></a>5.2.4 判定-条件覆盖</h3><ul><li>结合判定和条件覆盖，既保证每个判定结果出现一次，也保证每个条件的取值至少才出现一次</li><li>对于复杂的判定语句，需要仔细设计测试用例满足要求</li></ul><h3 id="5-2-5-条件组合覆盖"><a href="#5-2-5-条件组合覆盖" class="headerlink" title="5.2.5 条件组合覆盖"></a>5.2.5 条件组合覆盖</h3><ul><li>使每个判定中条件的各种可能组合都至少出现一次。</li><li>这是一种较强的覆盖标准，但在实际应用中，可能会因为条件组合的数量过多而导致测试用例数量庞大。</li></ul><h3 id="5-2-6-路径覆盖"><a href="#5-2-6-路径覆盖" class="headerlink" title="5.2.6 路径覆盖"></a>5.2.6 路径覆盖</h3><ul><li>覆盖程序所有路径</li><li>非常严格的标准，但往往受项目时长，复杂度等限制难以实现，路径数量较多。</li></ul><p>在实际的测试中，需要根据项目的需求和资源情况，选择合适的覆盖标准来设计测试用例。</p><h2 id="5-3-灰度测试"><a href="#5-3-灰度测试" class="headerlink" title="5.3 灰度测试"></a>5.3 灰度测试</h2><ul><li>介于白盒和黑盒之间的测试方法，关注外部功能表现的同时，也关注内部结构和逻辑</li><li>测试人员会了解部分软件的内部实现细节，例如软件的架构和模块之间的关系等，又不会像白盒测试一样精细到每一行代码</li></ul><h2 id="5-4-探索性测试"><a href="#5-4-探索性测试" class="headerlink" title="5.4 探索性测试"></a>5.4 探索性测试</h2><p>强调测试人员在测试过程中的主观性和创造性，保证测试的同时降低成本时间。</p><h2 id="5-5-冒烟测试"><a href="#5-5-冒烟测试" class="headerlink" title="5.5 冒烟测试"></a>5.5 冒烟测试</h2><p>对软件的基本功能快速测试，确定软件是否具备可测试性</p><h2 id="5-6-随机测试"><a href="#5-6-随机测试" class="headerlink" title="5.6 随机测试"></a>5.6 随机测试</h2><p>随机选择输入数据和操作步骤测试，发现一些隐藏问题。</p><h2 id="5-7-接口测试"><a href="#5-7-接口测试" class="headerlink" title="5.7 接口测试"></a>5.7 接口测试</h2><p>对软件的内外接口进行测试，检查接口传参、数据格式、异常处理等方面是否符合设计要求，确保不同模块或系统之间正确交互。</p><h2 id="5-8-集成测试"><a href="#5-8-集成测试" class="headerlink" title="5.8 集成测试"></a>5.8 集成测试</h2><p>将多个模块或组件集成在一起进行测试，检查它们之间的接口和协作是否正常，发现集成过程中可能出现的问题。</p><h2 id="5-9-系统测试"><a href="#5-9-系统测试" class="headerlink" title="5.9 系统测试"></a>5.9 系统测试</h2><p>将整个软件系统作为一个整体进行测试，验证系统的功能、性能、安全性、兼容性等方面是否满足需求和规格说明</p><h2 id="5-10-回归测试"><a href="#5-10-回归测试" class="headerlink" title="5.10 回归测试"></a>5.10 回归测试</h2><p>缺陷修复后，重新对相关功能测试，以确保修改没有引入新的问题，同时原有功能正常进行</p><h2 id="5-11-兼容性测试"><a href="#5-11-兼容性测试" class="headerlink" title="5.11 兼容性测试"></a>5.11 兼容性测试</h2><ul><li>系统兼容性：不同操作系统或平台运行</li><li>浏览器兼容性：多种主流浏览器运行</li><li>硬件兼容性：不同的设备</li></ul><h2 id="5-12-本地化测试"><a href="#5-12-本地化测试" class="headerlink" title="5.12 本地化测试"></a>5.12 本地化测试</h2><p>不同国家或地区的语言、文化、货币、日期等</p><h2 id="5-13-可用性测试"><a href="#5-13-可用性测试" class="headerlink" title="5.13 可用性测试"></a>5.13 可用性测试</h2><p>评估软件的的易用性和用户体验，通过实际试用的行为反馈，来提高软件可用性</p><h1 id="六、测试用例的设计"><a href="#六、测试用例的设计" class="headerlink" title="六、测试用例的设计"></a>六、测试用例的设计</h1><ul><li>测试用例定义<ul><li>为了特定目的而设计的一组测试输入，执行条件和预期结果的集合</li><li>是软件的重要组成部分，用于验证软件的需求功能，性能等。</li></ul></li><li>测试用例的重要性<ul><li>全面设计测试用例，发现缺陷和错误，提高软件的质量和可靠性</li><li>合理的测试用例可以减少重复测试，提高效率和覆盖率</li><li>可以作为执行测试的依据，便于测试管理和缺陷跟踪</li><li>作为开发人员和产品人员沟通桥梁，促进团队合作</li></ul></li></ul><table><thead><tr><th>Title</th><th>Description</th></tr></thead><tbody><tr><td>用例编号</td><td>用于唯一标识每个测试用例，方便管理和跟踪。。</td></tr><tr><td>测试项目&#x2F;模块</td><td>描述被测试的功能或特性，明确测试的范围和对象</td></tr><tr><td>测试目的</td><td>阐明该测试用例的测试目标，即希望通过该测试用例验证的内容。</td></tr><tr><td>前置条件</td><td>列出执行该测试用例所需的前提条件</td></tr><tr><td>测试步骤</td><td>详细描述执行测试的操作过程，包括输入数据、操作步骤和执行顺序等。</td></tr><tr><td>预期结果</td><td>说明在执行测试步骤后应该得到的结果，包括界面显示、数据输出、系统响应等方面的预期。</td></tr><tr><td>优先级</td><td>表示该测试用例的重要程度和执行的先后顺序。</td></tr><tr><td>测试类型</td><td>如功能测试、性能测试、安全测试等，明确测试的性质。</td></tr><tr><td>实际结果</td><td>在执行测试后记录实际得到的结果，用于与预期结果进行对比，判断测试是否通过。</td></tr><tr><td>测试人员</td><td>记录执行该测试用例的人员，以便在出现问题时进行追溯和责任认定。</td></tr><tr><td>测试时间</td><td>记录测试用例的执行时间，便于对测试进度进行监控和管理。</td></tr><tr><td>测试级别</td><td>确定测试的级别，如单元测试、集成测试、系统测试等。例如：系统测试。</td></tr></tbody></table><h2 id="6-1-测试用例注意事项"><a href="#6-1-测试用例注意事项" class="headerlink" title="6.1 测试用例注意事项"></a>6.1 测试用例注意事项</h2><ul><li>覆盖全面：尽可能覆盖软件的各种功能，场景和边界</li><li>有效性：测试用例应该能够有效发现软件中的缺陷和问题，避免无效的测试用例浪费时间和资源</li><li>可重复性：用例应该可以在不同环境和条件下重复执行，确保结果一致性和可靠性</li><li>可读性： 具有良好的可读性和可理解性，以便其他人员能够理解</li><li>及时更新： 软件迭代，测试用例也应该及时进行更新和维护</li></ul><h1 id="七、缺陷管理"><a href="#七、缺陷管理" class="headerlink" title="七、缺陷管理"></a>七、缺陷管理</h1><p>测试过程中非常重要的一环，旨在记录、跟踪和解决软件中的bug，确保软件的质量和稳定性，还可以提高开发和测试团队的协作效率，降低软件发布后的风险。</p><h2 id="7-1-缺陷管理流程"><a href="#7-1-缺陷管理流程" class="headerlink" title="7.1 缺陷管理流程"></a>7.1 缺陷管理流程</h2><ul><li>缺陷报告<ul><li>发现缺陷，及时详细记录缺陷的相关信息，重现步骤，预期结果和实际结果等</li><li>使用jira、bugzilla等软件提交缺陷报告</li></ul></li><li>bug等级和分类<ul><li>对bug进行优先级划分，根据bug的严重程度和影响范围，确定修复优先级</li><li>常见的分类包括功能缺陷、性能缺陷、安全缺陷、页面缺陷等</li></ul></li><li>bug分配<ul><li>bug分配给相关开发人员或负责人，确保每个bug都有明确的负责人</li><li>开发人员根据报告分析问题，进行修复</li></ul></li><li>bug修复<ul><li>开发人员修复bug，提交代码，进行自测，确保bug修复</li><li>保持与测试人员的沟通</li></ul></li><li>bug验证<ul><li>测试人员收到修复反馈，需要对修复的bug进行测试，并确保没有引入新的bug</li><li>验证通过，关闭bug报告，如果后期发现再次出现，则重新打开bug报告</li></ul></li><li>bug报告和分析<ul><li>定期生成bug报告，统计数量，类型，严重程度，修复时间等问题</li><li>通过分析，发现开发和测试过程中的薄弱环节，提出改进建议，优化开发和测试流程</li></ul></li></ul><h2 id="7-2-bug组成部分"><a href="#7-2-bug组成部分" class="headerlink" title="7.2 bug组成部分"></a>7.2 bug组成部分</h2><ul><li>编号：每个bug都有唯一的编号</li><li>标题：简要描述bug内容，是快速了解bug的主要信息</li><li>描述：描述具体情况，当时的环境，操作步骤等</li><li>类型：功能、性能、安全、界面缺陷</li><li>严重程度：致命、严重、一般、轻微</li><li>优先级：高中低等，或用数字表示</li><li>发现人：记录人员信息</li><li>时间：发现时间</li><li>模块：功能模块</li><li>重现步骤：详细描述操作步骤，附带的参数等</li><li>附件：相关截图和日志等。</li></ul><h1 id="八、测试模型"><a href="#八、测试模型" class="headerlink" title="八、测试模型"></a>八、测试模型</h1><p>软件测试中有几种常见的测试模型，v模型，w模型，H模型和敏捷测试模型，它们提供了结构化的方法来规划和执行测试，可以帮助测试更加有效地组织和管理整个测试过程，现代测试基本都以敏捷测试为主。</p><h2 id="8-1-v模型"><a href="#8-1-v模型" class="headerlink" title="8.1 v模型"></a>8.1 v模型</h2><p>是瀑布模型的一种改进，强调开发和测试活动的对称性和相互依赖关系。<br><img src="/pics/testing/v_model.png"></p><ul><li><p>优点</p><p>-明确的阶段性结构，开发和测试活动进展可控</p><p>-风险导向的测试，有助于发现和解决软件中的重要问题，提高测试效率和质量</p></li><li><p>缺点</p><ul><li><p>测试活动滞后，无法及时发现和解决问题，可能增加修复成本，并延长交付时间</p></li><li><p>缺乏灵活性和迭代性，面对需求变化频繁和迭代开发的项目不够灵活</p></li></ul></li><li><p>适用范围</p><ul><li>适用于中大型企业，通常企业有成熟的软件开发和测试流程，且能够承担一定的测试成本和资源投入</li></ul></li></ul><h2 id="8-2-w模型"><a href="#8-2-w模型" class="headerlink" title="8.2 w模型"></a>8.2 w模型</h2><p>W模型模明确标注了测试与开发同步进行的关系，且能表现出测试能更提早介入测试中，各个阶段伴进行不同测试设计<br><img src="/pics/testing/w_model.png"></p><ul><li><p>优点</p><ul><li><p>注重迭代开发，测试与开发同步进行，及早介入测试，可更早发现问题</p></li><li><p>更加灵活和变通，测试与开发同步进行可以快速响应需求变化</p></li><li><p>提高了风险管理，版本迭代中可以进行风险评估和优先级的确定，可将主要目光放在高风险测试点</p></li></ul></li><li><p>缺点</p><ul><li><p>对于版本迭代需求稳定要求比较高，无法支持迭代</p></li><li><p>有些项目急短快，无各种文档产生，模型就不使用</p></li><li><p>针对测试要求较高</p></li></ul></li><li><p>适用范围</p><ul><li>适合中大型企业，企业通常需要更快的交付周期和更灵活的开发流程，快速响应需求变更和市场竞争</li></ul></li></ul><h2 id="8-3-h模型"><a href="#8-3-h模型" class="headerlink" title="8.3 h模型"></a>8.3 h模型</h2><p>H模型结合了瀑布模型和迭代模型的优势，强调需求稳定性和迭代开发，有助于提高软件质量和交付效率<br><img src="/pics/testing/h_model.png"></p><ul><li><p>优点</p><ul><li><p>软件测试完全独立，贯穿整个生命周期，与其他流程并行</p></li><li><p>可以尽早介入测试，灵活度较高</p></li><li><p>提高了风险管理，版本迭代中可以进行风险评估和优先级的确定，可将主要目光放在高风险测试点</p></li></ul></li><li><p>缺点</p><ul><li><p>需求稳定性要求高：H模型要求在开发前期尽可能明确和稳定需求，对需求稳定性的要求较高</p></li><li><p>测试就绪准备的点难以掌控，需要精准评估</p></li><li><p>测试人员的技能要求较高，且需要良好的协作和沟通</p></li></ul></li><li><p>适用范围</p><ul><li>适合中大型企业，企业通常需要更快的交付周期和更灵活的开发流程，快速响应需求变更和市场竞争，但目前该类型企业用的比较少。</li></ul></li></ul><h2 id="8-4-敏捷模型"><a href="#8-4-敏捷模型" class="headerlink" title="8.4 敏捷模型"></a>8.4 敏捷模型</h2><p>敏捷软件开发是基于敏捷宣言定义的价值观和原则的一系列方法和实践的总称。自组织、跨职能团队运用适合他们自身环境的实践进行演进得出解决方案。</p><p>故敏捷模型是为了快速迭代开发上线，而引出的一种测试开发模型。强调快速迭代、持续集成和自动化测试。</p><p><img src="/pics/testing/mj_model.png"></p><ul><li><p>优点</p><ul><li><p>快速响应变化，能够及时适应需求变化和项目调整，快速迭代开发和测试</p></li><li><p>提高整体的风险管理，可以及早发现和修复问题，减少项目风险和质量风险</p></li><li><p>提高软件质量，通过持续集成和自动化测试，减少人为错误</p></li></ul></li><li><p>缺点</p><ul><li><p>需求频繁变更，敏捷开发强调变化和灵活性，但这也意味着需求可能会频繁变更</p></li><li><p>需要更专业的测试技能，要求测试团队丰富的测试经验和技能，可以快速迭代中保证高效测试</p></li><li><p>加深自动化测试依赖，自动化测试使用和维护成本增加</p></li></ul></li><li><p>适用范围</p><ul><li>大多为互联网企业（不轮大小），快速迭代开发测试，快速响应需求变更和市场竞争，尽早上线。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github-page部署https</title>
      <link href="/gh/deploy-https/"/>
      <url>/gh/deploy-https/</url>
      
        <content type="html"><![CDATA[<p>个人域名接入github，强制使用https。</p><span id="more"></span><h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><p>在做以下事情之前，先要保证username.github.io是可以正常访问的，也就是用户的github-page要可以正常访问</p><p>在github page部署个人blog也很多教程了，这里不再细说。</p><h2 id="个人域名"><a href="#个人域名" class="headerlink" title="个人域名"></a>个人域名</h2><p>个人购买域名可以通过各个服务商进行购买，阿里云、腾讯云、华为云等等，并且网上也很多教程，这里不再细说了。</p><h2 id="CNAME"><a href="#CNAME" class="headerlink" title="CNAME"></a>CNAME</h2><p>笔者的blog是基于<a href="https://molunerfinn.com/hexo-theme-melody-doc/zh-Hans/">hexo-theme-melody</a></p><p>CNAME文件需要放在source下，在github action部署的时候会自动将CNAME部署到gh-page分支</p><h3 id="CNAME文件内容"><a href="#CNAME文件内容" class="headerlink" title="CNAME文件内容"></a>CNAME文件内容</h3><p>在source下创建CNAME文件，写入域名，yourdomain.cn</p><p><strong>CNAME文件名要大写</strong></p><p><strong>CNAME文件名要大写</strong></p><p><strong>CNAME文件名要大写</strong></p><p>source&#x2F;CNAME</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yourdomain.cn</span><br></pre></td></tr></table></figure><h1 id="域名商管理后台修改域名解析"><a href="#域名商管理后台修改域名解析" class="headerlink" title="域名商管理后台修改域名解析"></a>域名商管理后台修改域名解析</h1><p>默认情况下域名是解析到购买的服务器，现在我们要修改到指向username.github.io</p><ul><li>添加一个CNAME，主机记录@，记录值username.github.io</li><li>添加一个CNAME，主机记录www，记录值username.github.io</li></ul><p>这样无论是否使用www，都能正常访问，<a href="http://www.yourdomain.cn/">www.yourdomain.cn</a>, yourdomain.cn，都会先解析成username.github.io，再根据CNAME变回个人域名</p><p><img src="/pics/github/deploy-https-1.png"></p><h1 id="github-setting"><a href="#github-setting" class="headerlink" title="github setting"></a>github setting</h1><p>去github对应的blog仓库内设置个人域名和https事宜</p><p>打开仓库，点击Settings，点击左侧的Pages，找到custom domain，填入个人域名</p><p>如果域名管域名解析那里设置正确，填入个人域名后，稍等一会会显示dns解析正确，就可以勾选Enforce HTTPS了</p><p><img src="/pics/github/deploy-https-2.png"><br><img src="/pics/github/deploy-https-3.png"></p><h1 id="ping-yourdomain-cn"><a href="#ping-yourdomain-cn" class="headerlink" title="ping yourdomain.cn"></a>ping yourdomain.cn</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">64 bytes from xxx.xxx.xxx.xxx: icmp_seq=0 ttl=53 time=99.820 ms</span><br><span class="line">64 bytes from xxx.xxx.xxx.xxx: icmp_seq=1 ttl=53 time=100.451 ms</span><br><span class="line">64 bytes from xxx.xxx.xxx.xxx: icmp_seq=2 ttl=53 time=101.277 ms</span><br><span class="line">64 bytes from xxx.xxx.xxx.xxx: icmp_seq=3 ttl=53 time=109.720 ms</span><br></pre></td></tr></table></figure><p>上方打印的 from xxx.xxx.xxx.xxx，这些xxx代表的是ip地址。</p><p>如果这个ip地址并不是你的服务器地址，并且个人域名可以正常访问，说明配置没有问题了。</p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github-page </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 搭建与基础</title>
      <link href="/database/mysql/basic/"/>
      <url>/database/mysql/basic/</url>
      
        <content type="html"><![CDATA[<p>mysql基础学习与基础docker搭建</p><span id="more"></span><h2 id="数据库相关定义"><a href="#数据库相关定义" class="headerlink" title="数据库相关定义"></a>数据库相关定义</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库 database，按照特定格式存储数据的<strong>文件集合</strong></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>用户可以对存储的数据进行增删改查操作。</p><h3 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h3><p>用户与操作系统之间使用的维护数据库的数据管理软件，例如 mysql，mongodb，oracle 等。</p><h3 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h3><p>分为关系型数据库和非关系型数据库，mysql 数据关系型</p><h4 id="关系型数据库是由多张表连接组成的数据库"><a href="#关系型数据库是由多张表连接组成的数据库" class="headerlink" title="关系型数据库是由多张表连接组成的数据库"></a>关系型数据库是由多张表连接组成的数据库</h4><p>优点：</p><ul><li>表结构，格式一致，易于维护</li><li>提供成熟的 sql 语言操作，使用方便</li><li>支持事务，表关联外键，能充分保证数据安全与完整性</li><li>数据存储在硬盘中，丢失风险低</li></ul><p>缺点：</p><ul><li>数据存储在硬盘，读写性能较低，不能满足海量数据的高效率读写，经过优化可以提高一定查询速度，拆分表，表按照月度拆分等</li><li>只支持基础类型和少量的集合类型</li></ul><p>对于高并发的场景，可以分库，建立 mysql 集群。</p><p>分布式和集群的区别：</p><ul><li>分布式是指将不同业务分布到不同地方</li><li>集群是将几台服务器集中在一起，目的是为了同一个业务</li></ul><h4 id="非关系性数据库-NoSql"><a href="#非关系性数据库-NoSql" class="headerlink" title="非关系性数据库 NoSql"></a>非关系性数据库 NoSql</h4><p>优点：</p><ul><li>支持存储格式较多，可以是 key-value，数组，文档形式，图片形式</li><li>速度快，更适合海量数据访问</li><li>支持分布式处理，一个数据库可以分成多个部分保存到不同服务器</li></ul><p>缺点</p><ul><li>非关系型数据库没有 sql 支持，使用不便，维护成本高</li><li>没有事务处理，没有表关联，所以无法保证数据完整性和安全性，不适合对安全要求较高的场景</li><li>功能相对关系型数据库会不够完善（随着发展，肯定会继续完善）</li></ul><h2 id="mysql-数据库安装"><a href="#mysql-数据库安装" class="headerlink" title="mysql 数据库安装"></a>mysql 数据库安装</h2><h3 id="mysqld-和-mysql"><a href="#mysqld-和-mysql" class="headerlink" title="mysqld 和 mysql"></a>mysqld 和 mysql</h3><ul><li>mysqld 在安装好 mysql 数据库后，身份是一个后台服务程序，mysql 启动后，mysqld 会开启一个守护进程，如果守护进程没有开启，mysql 服务器可能会挂掉</li><li>mysql 相当于是客户端和 mysql 服务器之间进行 sql 语句交互提供操作环境的 cli 命令行工具，客户端连接 mysql 服务器和操作表都在这个操作环境下进行，参考一下前端开发中的脚手架，也是提供了操作的命令行工具</li></ul><h3 id="docker-安装-mysql"><a href="#docker-安装-mysql" class="headerlink" title="docker 安装 mysql"></a>docker 安装 mysql</h3><h4 id="拉取-mysql-的镜像"><a href="#拉取-mysql-的镜像" class="headerlink" title="拉取 mysql 的镜像"></a>拉取 mysql 的镜像</h4><p>mac m1 arm64v8 平台</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull arm64v8/mysql:latest</span><br></pre></td></tr></table></figure><p>其他平台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:latest</span><br></pre></td></tr></table></figure><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=some_root_password -p 3306:3306  -d arm64v8/mysql:latest</span><br></pre></td></tr></table></figure><h4 id="使用-navicat-测试-mysql-连接"><a href="#使用-navicat-测试-mysql-连接" class="headerlink" title="使用 navicat 测试 mysql 连接"></a>使用 navicat 测试 mysql 连接</h4><p>填入对应账号密码，主机等，然后点击左下角的 test connection</p><p><img src="/pics/infrastructure/test-mysql.jpeg"></p><p>测试成功后，点击右下角 save 保存连接</p><p><img src="/pics/infrastructure/test-mysql-success.jpeg"></p><h3 id="my-ini-x2F-my-cnf-配置文件解析"><a href="#my-ini-x2F-my-cnf-配置文件解析" class="headerlink" title="my.ini&#x2F;my.cnf 配置文件解析"></a>my.ini&#x2F;my.cnf 配置文件解析</h3><p>现阶段一般都是使用 docker 搭建数据库等环境</p><p>本地环境</p><ul><li>物理机：mac m1</li><li>虚拟机：docker</li><li>镜像：arm64v8&#x2F;mysql</li></ul><p>不同物理机平台可能会有些不同</p><p>在 docker 中，my.cnf&#x2F;my.ini 位于&#x2F;etc&#x2F;my.cnf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"><span class="comment"># mysql客户端默认字符集</span></span><br><span class="line">default-character-set=UTF8MB4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">skip-host-cache</span><br><span class="line">skip-name-resolve</span><br><span class="line"><span class="comment"># mysql数据库的数据存储目录</span></span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/run/mysqld/mysqld.sock</span><br><span class="line">secure-file-priv=/var/lib/mysql-files</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">user=mysql</span><br><span class="line"><span class="comment"># 服务端使用的字符集,与客户端一样</span></span><br><span class="line">character-set-server=UTF8MB4</span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line">max_connections=200</span><br><span class="line"><span class="comment"># 创建新表使用的默认存储引擎</span></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">socket=/var/run/mysqld/mysqld.sock</span><br><span class="line"></span><br><span class="line">!includedir /etc/mysql/conf.d/</span><br></pre></td></tr></table></figure><h3 id="mysql-登录"><a href="#mysql-登录" class="headerlink" title="mysql 登录"></a>mysql 登录</h3><p>进入镜像内部</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container-name&gt; bash</span><br></pre></td></tr></table></figure><p>输入 mysql -u root -p 后，提示输入密码，输入密码后就可以登录到 mysql 内部了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h2 id="mysql-基本操作"><a href="#mysql-基本操作" class="headerlink" title="mysql 基本操作"></a>mysql 基本操作</h2><p>操作需要成功登录 mysql 之后</p><h3 id="显示所有数据库"><a href="#显示所有数据库" class="headerlink" title="显示所有数据库"></a>显示所有数据库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><h3 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h3><p>创建一个没有权限用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user <span class="string">&#x27;admin&#x27;</span> identified with mysql_native_password by <span class="string">&#x27;some_psw&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="分配权限"><a href="#分配权限" class="headerlink" title="分配权限"></a>分配权限</h3><p>分配所有权限给 admin</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges ON *.* TO admin@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>创建名称为 test 的数据库，如果数据库已存在，则不创建。</p><p>character: 指定数据库的字符集，避免存储的数据出现乱码，或者某些字符不支持</p><p>collate: 指定字符集的默认校对规则</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database IF NOT EXISTS <span class="built_in">test</span> CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p>显示所有数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>如果 test 数据库存在，删除 test 数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database <span class="keyword">if</span> exists <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h3><p>会切换到 test 数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use <span class="built_in">test</span>;</span><br></pre></td></tr></table></figure><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>前面说过，关系型数据库是一张一张的表架构组合而成，userid，username，psw 等这些称为字段（field），而字段的类型从创建表阶段就定好了</p><p>userid int NOT NULL AUTO_INCREMENT<br>userid int 类型 非空 自增长</p><p>primary key(userid)，表示是一个可以唯一表示一条记录的字段</p><p><strong>注意：创建数据表之前必须使用 use &lt;database name&gt;去切换到对应的数据库</strong></p><p><strong>注意：创建数据表之前必须使用 use &lt;database name&gt;去切换到对应的数据库</strong></p><p><strong>注意：创建数据表之前必须使用 use &lt;database name&gt;去切换到对应的数据库</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table userinfo(</span><br><span class="line">  userid int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  username varchar(30) NOT NULL,</span><br><span class="line">  psw int NOT NULL,</span><br><span class="line">  address varchar(50) default <span class="string">&#x27;empty address&#x27;</span>,</span><br><span class="line">  valid TINYINT default 1,</span><br><span class="line">  birth DATETIME null,</span><br><span class="line">  PRIMARY KEY(userid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建数据表完成，输入 show tables;显示当前数据库的表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| userinfo       |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE userinfo RENAME TO myuserinfo;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| myuserinfo     |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="添加数据到某个表-insert-into"><a href="#添加数据到某个表-insert-into" class="headerlink" title="添加数据到某个表 insert into"></a>添加数据到某个表 insert into</h3><p>提供完整数据的写法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into userinfo values(1, <span class="string">&#x27;username1&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>, <span class="string">&#x27;guangzhou&#x27;</span>, 1, <span class="string">&#x27;1989/1/1 01:01:01&#x27;</span>);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>有些字段在创建数据表的阶段提供了默认值，例如地址 address，是否合法 valid，那么可以通过指定字段和对应值插入数据</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into userinfo(username, psw, birth) values(<span class="string">&#x27;user2&#x27;</span>, <span class="string">&#x27;123123123&#x27;</span>, <span class="string">&#x27;1989/1/1 01:01:01&#x27;</span>);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from userinfo;</span><br><span class="line">+--------+-----------+-----------+---------------+-------+---------------------+</span><br><span class="line">| userid | username  | psw       | address       | valid | birth               |</span><br><span class="line">+--------+-----------+-----------+---------------+-------+---------------------+</span><br><span class="line">|      1 | username1 |    123123 | guangzhou     |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">|      2 | user2     | 123123123 | empty address |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">+--------+-----------+-----------+---------------+-------+---------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>某些字段指定了 not null 并且没有指定 default，则必须要提供值.</p><p>这个例子没有提供 username 字段的值，提示 username 没有默认值</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into userinfo(psw, birth) values(<span class="string">&#x27;123123&#x27;</span>, <span class="string">&#x27;1989/1/1 01:01:01&#x27;</span>);</span><br><span class="line">ERROR 1364 (HY000): Field <span class="string">&#x27;username&#x27;</span> doesn<span class="string">&#x27;t have a default value</span></span><br></pre></td></tr></table></figure><h3 id="选择查询-select"><a href="#选择查询-select" class="headerlink" title="选择查询 select"></a>选择查询 select</h3><p>在 userinfo 表中查询所有数据</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from userinfo;</span><br><span class="line">+--------+-----------+--------+-----------+-------+---------------------+</span><br><span class="line">| userid | username  | psw    | address   | valid | birth               |</span><br><span class="line">+--------+-----------+--------+-----------+-------+---------------------+</span><br><span class="line">|      1 | username1 | 123123 | guangzhou |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">+--------+-----------+--------+-----------+-------+---------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="修改字段名称"><a href="#修改字段名称" class="headerlink" title="修改字段名称"></a>修改字段名称</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table myuserinfo change psw password varchar(20);</span><br><span class="line">Query OK, 2 rows affected (0.05 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><h3 id="更新一行数据"><a href="#更新一行数据" class="headerlink" title="更新一行数据"></a>更新一行数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update userinfo <span class="built_in">set</span> age=56 <span class="built_in">where</span> userid=1;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure><h2 id="mysql-数据类型"><a href="#mysql-数据类型" class="headerlink" title="mysql 数据类型"></a>mysql 数据类型</h2><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><ul><li>char：固定长度 1-255 字节，定好了长度之后，无论实际长度，都是占用固定长度</li><li>varchar：可变长度 1-255 字节，定好了长度之后，会根据实际长度进行伸缩</li><li>text：大文本 65535 字节</li></ul><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><ul><li>tinyint：1 byte</li><li>smallint：2 byte</li><li>mediumint：3 byte</li><li>int：4 byte</li><li>bigint：8 byte</li></ul><h3 id="浮动类型"><a href="#浮动类型" class="headerlink" title="浮动类型"></a>浮动类型</h3><ul><li>float：4 byte</li><li>double：8 byte</li></ul><h3 id="日期-x2F-时间类型"><a href="#日期-x2F-时间类型" class="headerlink" title="日期&#x2F;时间类型"></a>日期&#x2F;时间类型</h3><ul><li>date：3 byte 记录的是年月日</li><li>datetime：8 byte 年月日时分秒</li></ul><h2 id="数据库查询"><a href="#数据库查询" class="headerlink" title="数据库查询"></a>数据库查询</h2><h3 id="查询所有行"><a href="#查询所有行" class="headerlink" title="查询所有行"></a>查询所有行</h3><p>select * from &lt;table name&gt;</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from userinfo;</span><br><span class="line">+--------+-----------+-----------+---------------+-------+---------------------+</span><br><span class="line">| userid | username  | password  | address       | valid | birth               |</span><br><span class="line">+--------+-----------+-----------+---------------+-------+---------------------+</span><br><span class="line">|      1 | username1 | 123123    | guangzhou     |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">|      2 | user2     | 123123123 | empty address |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">+--------+-----------+-----------+---------------+-------+---------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br></pre></td></tr></table></figure><h3 id="投影查询，即查询局部字段"><a href="#投影查询，即查询局部字段" class="headerlink" title="投影查询，即查询局部字段"></a>投影查询，即查询局部字段</h3><p>需要查询多个字段可以使用逗号分隔</p><p>select address from userinfo;<br>select userid,username from userinfo;</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select userid,username from userinfo;</span><br><span class="line">+--------+-----------+</span><br><span class="line">| userid | username  |</span><br><span class="line">+--------+-----------+</span><br><span class="line">|      1 | username1 |</span><br><span class="line">|      2 | user2     |</span><br><span class="line">+--------+-----------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="字段别名设置"><a href="#字段别名设置" class="headerlink" title="字段别名设置"></a>字段别名设置</h3><p>select userid,username as un, address as addr from userinfo;</p><p>通过关键字as，将username设置为别名un，address设置为addr</p><p>这种别名设置是临时的，并不会改动原有字段名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select userid,username as un, address as addr from userinfo;</span><br><span class="line">+--------+-----------+---------------+</span><br><span class="line">| userid | un        | addr          |</span><br><span class="line">+--------+-----------+---------------+</span><br><span class="line">|      1 | username1 | guangzhou     |</span><br><span class="line">|      2 | user2     | empty address |</span><br><span class="line">+--------+-----------+---------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="limit查询"><a href="#limit查询" class="headerlink" title="limit查询"></a>limit查询</h3><p><strong>注意：mysql的位置是从0开始，与我们大部分编程语言中的索引是一样的</strong></p><p><strong>注意：mysql的位置是从0开始，与我们大部分编程语言中的索引是一样的</strong></p><p><strong>注意：mysql的位置是从0开始，与我们大部分编程语言中的索引是一样的</strong></p><p>limit是mysql中的一个特殊关键字，有三种使用方式</p><ul><li>limit 记录数, 从第一条开始查询 select * from userinfo limit 1;</li><li>limit 起始位置，记录数  select * from userinfo limit 1,1;</li><li>limit 记录数 offset 偏移 select * from userinfo limit 1 offset 1;</li></ul><p>方式二和三的结果是一样的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from userinfo <span class="built_in">limit</span> 2,3;</span><br><span class="line">mysql&gt; select * from userinfo <span class="built_in">limit</span> 3 offset 2;</span><br><span class="line"></span><br><span class="line">+--------+----------+----------+-----------+-------+---------------------+</span><br><span class="line">| userid | username | password | address   | valid | birth               |</span><br><span class="line">+--------+----------+----------+-----------+-------+---------------------+</span><br><span class="line">|      3 | user3    | 123123   | guangzhou |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">|      4 | user4    | 123123   | guangzhou |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">|      5 | user5    | 123123   | guangzhou |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">+--------+----------+----------+-----------+-------+---------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><ul><li>and 并查询 select * from userinfo where username&#x3D;’user2’ and password&#x3D;’123123’;</li><li>or 或查询 select * from userinfo where username&#x3D;’user2’ or password&#x3D;’123123’;</li><li>between 区间查询 select * from userinfo where age between 30 and 35;</li><li>in 子查询,只会查询in里面的条件，30岁和35岁，31-34不算在内 select * from userinfo where age in(30,35);</li><li>is null 空查询 select * in userinfo where address is null;</li><li>like 模糊查询 % 代表1个或者多个<ul><li>select * from userinfo where username like ‘%us’;  us在后面</li><li>select * from userinfo where username like ‘us%’;  us在前面</li><li>select * from userinfo where username like ‘%us%’; us在任何位置</li><li>select * from userinfo where username like ‘__us’; us前面必须有两个字符</li><li>select * from userinfo where username like binary ‘__Us’; 区分大小写</li></ul></li></ul><p>示例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from userinfo <span class="built_in">where</span> username=<span class="string">&#x27;user3&#x27;</span> and password=<span class="string">&#x27;123123&#x27;</span>;</span><br><span class="line">+--------+----------+----------+-----------+-------+---------------------+</span><br><span class="line">| userid | username | password | address   | valid | birth               |</span><br><span class="line">+--------+----------+----------+-----------+-------+---------------------+</span><br><span class="line">|      3 | user3    | 123123   | guangzhou |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">+--------+----------+----------+-----------+-------+---------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目的基础设施搭建（一）</title>
      <link href="/environment/frontend/vue/"/>
      <url>/environment/frontend/vue/</url>
      
        <content type="html"><![CDATA[<p>vue3 + typescript + eslint + husky + pnpm</p><p>统一化团队的代码风格，样式，git规范等</p><span id="more"></span><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>一般前端基建包括以下内容：</p><ul><li>基本语言：javascript、Typescript</li><li>环境配置：env文件内容注入</li><li>打包构建工具：例如Webpack、Rollup、vite等；</li><li>包管理工具：例如npm、Yarn、pnpm等；</li><li>前端框架：例如React、Vue.js等；</li><li>代码质量工具：例如ESLint、Prettier等；</li><li>单元测试：例如Jest、Mocha等；</li><li>HTTP请求库：例如Axios、Fetch等；</li><li>状态管理工具：例如Redux、Mobx、vuex、pinna等；</li><li>UI组件库：例如Ant Design、Element UI、自建组件库等；</li><li>前端性能分析工具：例如Lighthouse、WebPageTest等；</li><li>应用部署与自动化工具：例如Docker、Travis CI等。</li></ul><h2 id="monorepo项目搭建"><a href="#monorepo项目搭建" class="headerlink" title="monorepo项目搭建"></a>monorepo项目搭建</h2><p>现在很大一部分框架都采用了pnpm进行多包的管理，例如vue，element-plus等</p><p>官方文档：<a href="https://pnpm.io/zh/motivation">https://pnpm.io/zh/motivation</a></p><p>具体事项不再细说，本文章主要目的是手把手的操作与记录。</p><h3 id="pnpm安装"><a href="#pnpm安装" class="headerlink" title="pnpm安装"></a>pnpm安装</h3><p>个人建议pnpm全局安装，更加的方便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装pnpm</span></span><br><span class="line">npm install -g pnpm</span><br><span class="line"><span class="comment"># 打印版本，当前我使用的8.0.0</span></span><br><span class="line">pnpm --version </span><br><span class="line"><span class="comment"># 列出帮助文档</span></span><br><span class="line">pnpm -h </span><br></pre></td></tr></table></figure><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p>pnpm-workspace.yaml定义了工作空间的根目录，并能够使您从工作空间中包含 &#x2F; 排除目录 。默认情况下，包含所有子目录。</p><p>在项目根目录初始化和创建pnpm-workspace.yaml文件，并填入示例内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm init</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> pnpm-workspace.yaml</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pnpm-workspace.yaml</span></span><br><span class="line"><span class="attr">packages:</span></span><br><span class="line">  <span class="comment"># packages下所有直接子包</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;packages/*&#x27;</span></span><br></pre></td></tr></table></figure><p>假定我们的模块分块是core，utils，components，那么就可以在packages目录下分别新建这三个文件夹，分别执行pnpm init去生成对应package.json文件</p><p>示例：其他模块同理，这里不再赘述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> packages</span><br><span class="line"><span class="built_in">mkdir</span> core &amp;&amp; <span class="built_in">cd</span> core &amp;&amp; pnpm init</span><br></pre></td></tr></table></figure><h4 id="node-modules扁平化的问题"><a href="#node-modules扁平化的问题" class="headerlink" title="node_modules扁平化的问题"></a>node_modules扁平化的问题</h4><p>pnpm的node_modules结构是非扁平化的，而npm和yarn采用了平铺的node_modules结构，平铺结构的一个较明显的问题是幽灵依赖，即在package.json中没有定义，但是我们可以导入使用的依赖。</p><p>如果需要pnpm将node_modules平铺，根目录新建.npmrc文件，填入shamefully-hoist&#x3D;true</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .npmrc</span></span><br><span class="line">shamefully-hoist=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h2><p>typescript的安装一般会选择跟随项目，即在项目内安装typescript，避免不同typescript版本导致的兼容性问题</p><h3 id="安装和初始化"><a href="#安装和初始化" class="headerlink" title="安装和初始化"></a>安装和初始化</h3><p>全项目ts，安装在根目录即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add typescript -Dw</span><br></pre></td></tr></table></figure><p>初始化，操作完成后执行目录会生成一个tsconfig.json</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tsc --init</span><br></pre></td></tr></table></figure><h3 id="tsconfig"><a href="#tsconfig" class="headerlink" title="tsconfig"></a>tsconfig</h3><p>参考element-plus，为了提高tsconfig的扩展性，提供tsconfig.base.json，tsconfig.web.json, tsconfig.json等文件，tsconfig.json主要作为一个入口，用于引用其他tsconfig文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.base.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* Visit https://aka.ms/tsconfig to read more about this file */</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2018&quot;</span><span class="punctuation">,</span> <span class="comment">// es版本，不同的es版本会对es特性进行降级</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定生成哪个模块系统代码 &quot;CommonJS&quot; &quot;ES6&quot;或 &quot;ESNext&quot;。 </span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span> <span class="comment">// 如何处理模块</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 在 .js文件中报告错误。与 --allowJs配合使用</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 允许编译javascript文件</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span> <span class="comment">// 解析非相对模块名的基准目录</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// 设置baseUrl来告诉编译器到哪里去查找模块。 所有非相对模块导入都会被当做相对于 baseUrl</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noUnusedLocals&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 若有未使用的局部变量则抛错</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 允许解析json文件</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。 设置了esModuleInterop和module !== es2015 / esnext</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * import * as moment from &quot;moment&quot; 等价于 const moment = require(&quot;moment&quot;)</span></span><br><span class="line"><span class="comment">    * import moment from &quot;moment&quot; 等价于 const moment = require(&quot;moment&quot;).default</span></span><br><span class="line"><span class="comment">    * es6模块规范规定，import * as x 应该是一个对象，ts处理成 =require(xxx)的行为是把导入当作一个可调用的函数，不符合规范</span></span><br><span class="line"><span class="comment">    * 开启esModuleInterop会自动修复这个转译问题</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 如果composite为true</span></span><br><span class="line">    <span class="comment">// rootDir设置，如果没有被显式指定，默认为包含tsconfig文件的目录</span></span><br><span class="line">    <span class="comment">// 必须匹配到include模式或者files数组</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> <span class="comment">// 所有输入的 非声明文件 中的最长公共路径，</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 指定要包含的类型包名称，而不需要在源文件中引用</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 路径映射</span></span><br><span class="line">      <span class="attr">&quot;@acelcdev/lc-client-*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;packages/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.web.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./tsconfig.base.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;composite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 引用的工程必须启用新的composite设置</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span> <span class="comment">// tsx文件里面支持jsx</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ES2018&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM.Iterable&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 编译过程中需要引入的库文件的列表</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 忽略所有的声明文件（ *.d.ts）的类型检查。</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;packages/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;**/dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;**/__tests__/**/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;**/gulpfile.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;**/test-helper&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;**/*.md&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;docs&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>总入口</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./tsconfig.web.json&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>项目根目录执行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tsc --build tsconfig.json</span><br></pre></td></tr></table></figure><p>在根目录生成了dist文件夹，内部结构与packages一致，同时具有js文件和d.ts声明文件</p><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><h3 id="安装和初始化-1"><a href="#安装和初始化-1" class="headerlink" title="安装和初始化"></a>安装和初始化</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add eslint -Dw</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm create @eslint/config</span><br></pre></td></tr></table></figure><p>这里笔者选择的是To check syntax and find problems</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? How would you like to use ESLint? … </span><br><span class="line">  To check syntax only</span><br><span class="line">❯ To check syntax and find problems</span><br><span class="line">  To check syntax, find problems, and enforce code style</span><br></pre></td></tr></table></figure><p>使用的是es6规范，所以选择javascript modules，要看自己项目需求</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? What <span class="built_in">type</span> of modules does your project use? ...</span><br><span class="line">&gt; JavaScript modules (import/export)</span><br><span class="line">  CommonJS (require/exports)</span><br><span class="line">  None of these</span><br></pre></td></tr></table></figure><p>看自己项目需求</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? Which framework does your project use? … </span><br><span class="line">  React</span><br><span class="line">❯ Vue.js</span><br><span class="line">  None of these</span><br></pre></td></tr></table></figure><p>使用ts?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Does your project use TypeScript? » No / Yes</span><br></pre></td></tr></table></figure><p>两个都选</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Where does your code run? ...  (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">√ Browser</span><br><span class="line">√ Node</span><br></pre></td></tr></table></figure><p>配置文件格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? What format do you want your config file to be in? ...</span><br><span class="line">&gt; JavaScript</span><br><span class="line">  YAML</span><br><span class="line">  JSON</span><br></pre></td></tr></table></figure><p>笔者选择了yes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eslint-plugin-vue@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest</span><br><span class="line">? Would you like to install them now? › No / Yes</span><br></pre></td></tr></table></figure><p>后续的可以根据项目需求调整即可，最后生成.eslint.js文件</p><p>项目根目录安装下列eslint插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add eslint-plugin-vue @typescript-eslint/eslint-plugin@latest -Dw</span><br></pre></td></tr></table></figure><h3 id="eslintrc-js-amp-eslintignore"><a href="#eslintrc-js-amp-eslintignore" class="headerlink" title=".eslintrc.js &amp; .eslintignore"></a>.eslintrc.js &amp; .eslintignore</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;es2021&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;node&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">        <span class="string">&quot;plugin:vue/vue3-recommended&quot;</span>, <span class="comment">// 原来是plugin:vue/vue3-essential</span></span><br><span class="line">        <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;overrides&quot;</span>: [</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;parser&quot;</span>: <span class="string">&quot;@typescript-eslint/parser&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ecmaVersion&quot;</span>: <span class="string">&quot;latest&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@typescript-eslint&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;semi&quot;</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;always&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.eslintignore文件是一个纯文本文件，每一行都是一个glob模式告知eslint忽略哪些文件或者目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .eslintignore</span></span><br><span class="line">*.js</span><br><span class="line">dist</span><br><span class="line">docs</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>根目录package.json新增脚本，目前只需要校验packages里面的ts文件，具体文件需要根据项目需求进行配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --ext .ts packages/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint:fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --ext .ts packages/ --fix&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在index.ts内定义了const a &#x3D; 1，故意不带分号，eslintrc里面设置了不带分号就报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pnpm lint</span><br><span class="line"></span><br><span class="line">&gt; eslint --ext .ts packages/</span><br><span class="line"></span><br><span class="line">/path/packages/core/index.ts</span><br><span class="line">  1:7   warning  <span class="string">&#x27;a&#x27;</span> is assigned a value but never used  @typescript-eslint/no-unused-vars</span><br><span class="line">  1:12  error    Missing semicolon                       semi</span><br><span class="line"></span><br><span class="line">✖ 2 problems (1 error, 1 warning)</span><br><span class="line">  1 error and 0 warnings potentially fixable with the `--fix` option.</span><br></pre></td></tr></table></figure><p>这个时候可以运行pnpm lint:fix进行修复</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pnpm lint:fix</span><br><span class="line"><span class="comment"># 修复后，只剩一个a变量定义但没有使用的warning</span></span><br><span class="line">&gt; eslint --ext .ts packages/ --fix</span><br><span class="line"></span><br><span class="line">/path/packages/core/index.ts</span><br><span class="line">  1:7  warning  <span class="string">&#x27;a&#x27;</span> is assigned a value but never used  @typescript-eslint/no-unused-vars</span><br><span class="line"></span><br><span class="line">✖ 1 problem (0 errors, 1 warning)</span><br></pre></td></tr></table></figure><h3 id="vscode-eslint设置"><a href="#vscode-eslint设置" class="headerlink" title="vscode eslint设置"></a>vscode eslint设置</h3><p>生效的前提是必须去vscode的扩展商店安装eslint插件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vscode/settings.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;update.enableWindowsBackgroundUpdates&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 每次保存的时候自动格式化</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dbaeumer.vscode-eslint&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.format.enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.alwaysShowStatus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.validate&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;typescript&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;typescriptreact&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="husky-amp-commitlint"><a href="#husky-amp-commitlint" class="headerlink" title="husky &amp; commitlint"></a>husky &amp; commitlint</h2><p>husky是前端工程化的一个重要工具，可以方便的向项目中添加git hooks，一般在commit之前校验代码，commit的时候检验commit信息是否符合规范，而且设置简单。</p><h3 id="husky安装和初始化"><a href="#husky安装和初始化" class="headerlink" title="husky安装和初始化"></a>husky安装和初始化</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add husky -Dw</span><br></pre></td></tr></table></figure><p>package.json中添加prepare脚本，执行git init，再执行pnpm prepare</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;prepare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;husky install&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>执行完上述命令后，根目录会存在一个.husky文件夹，接下来执行以下命令，在commit的时候，就会自动运行pnpm lint，如果lint不通过，将会终止git commit。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/pre-commit <span class="string">&quot;pnpm lint&quot;</span></span><br></pre></td></tr></table></figure><p>如果git commit因为代码校验不通过而被终止，这时候可以通过pnpm lint:fix进行代码自动格式化，通过代码校验后即可以再次commit</p><h3 id="commitlint安装和初始化"><a href="#commitlint安装和初始化" class="headerlink" title="commitlint安装和初始化"></a>commitlint安装和初始化</h3><p>commitlint的作用是校验commit信息的规范性，官方提供了对应commit信息的模板，类似于git commit -m “test” 这类的commit是无法通过校验的。</p><p>一般要求的格式是</p><ul><li>feat: xxx</li><li>fix: xxx</li><li>docs: xxx</li></ul><p>官方文档：<a href="https://commitlint.js.org/#/reference-prompt">https://commitlint.js.org/#/reference-prompt</a></p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;feat: add some feature&quot;</span><br><span class="line">git commit -m &quot;fix: fix some bug&quot;</span><br></pre></td></tr></table></figure><h4 id="安装和初始化-2"><a href="#安装和初始化-2" class="headerlink" title="安装和初始化"></a>安装和初始化</h4><p>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add @commitlint/cli @commitlint/config-conventional -Dw</span><br></pre></td></tr></table></figure><p>设置commitlint需要遵循的规范，在根目录创建commitlint.config.js，填入以下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;@commitlint/config-conventional&quot;</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配合husky使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/commit-msg  &#x27;npx --no -- commitlint --edit $&#123;1&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>首先故意设置const a &#x3D; 1 不带分号，导致pre-commit终止</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; eslint --ext .ts packages/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/path/packages/client/index.ts</span><br><span class="line">  1:7   warning  <span class="string">&#x27;a&#x27;</span> is assigned a value but never used  @typescript-eslint/no-unused-vars</span><br><span class="line">  1:14  error    Missing semicolon                       semi</span><br><span class="line"></span><br><span class="line">✖ 2 problems (1 error, 1 warning)</span><br><span class="line">  1 error and 0 warnings potentially fixable with the `--fix` option.</span><br><span class="line"></span><br><span class="line"> ELIFECYCLE  Command failed with <span class="built_in">exit</span> code 1.</span><br></pre></td></tr></table></figure><p>运行pnpm lint:fix修复，修复后提示a未被使用，但是没有error</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; eslint --ext .ts packages/ --fix</span><br><span class="line"></span><br><span class="line">/path/packages/client/index.ts</span><br><span class="line">  1:7  warning  <span class="string">&#x27;a&#x27;</span> is assigned a value but never used  @typescript-eslint/no-unused-vars</span><br><span class="line"></span><br><span class="line">✖ 1 problem (0 errors, 1 warning)</span><br></pre></td></tr></table></figure><p>再次提交commit，故意不按照commit规范</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;test commit-msg hook&quot;</span></span><br></pre></td></tr></table></figure><p>此时提示commit-msg hook error</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">⧗  input: <span class="built_in">test</span> commit-msg hook</span><br><span class="line">✖   Please add rules to your `commitlint.config.js`</span><br><span class="line">    - Getting started guide: https://commitlint.js.org/<span class="comment">#/?id=getting-started</span></span><br><span class="line">    - Example config: https://github.com/conventional-changelog/commitlint/blob/master/%40commitlint/config-conventional/index.js [empty-rules]</span><br><span class="line"></span><br><span class="line">✖   found 1 problems, 0 warnings</span><br><span class="line">ⓘ   Get <span class="built_in">help</span>: https://github.com/conventional-changelog/commitlint/<span class="comment">#what-is-commitlint</span></span><br><span class="line"></span><br><span class="line">husky - commit-msg hook exited with code 1 (error)</span><br></pre></td></tr></table></figure><p>修改commit msg，校验通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;test: test commitlint&quot;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feat/initial 6490b0c] <span class="built_in">test</span>: <span class="built_in">test</span> commit lint</span><br><span class="line"> 3 files changed, 1077 insertions(+)</span><br><span class="line"> create mode 100755 .husky/commit-msg</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文的内容相对基础，主要是总结一下具体的用途和解决方案，并非很详细的教学内容，如果需要高级的用法，最好的方法还是通过官方文档，去学习如何配置，高级用法等。</p><p>下一篇计划开始编写与环境配置、构建相关的内容。</p>]]></content>
      
      
      <categories>
          
          <category> environment </category>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> environment </tag>
            
            <tag> frontend </tag>
            
            <tag> 前端 </tag>
            
            <tag> vue3 </tag>
            
            <tag> typescipt </tag>
            
            <tag> eslint </tag>
            
            <tag> husky </tag>
            
            <tag> pnpm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
